@comment{'various stuff'}
@includeNamed{'/vertx-java/template/common-lib.templ'}
@code{
  /**
   * Render a tag link to an html link, this function is used as parameter of the
   * renderDocToHtml function when it needs to render tag links.
   */
  def renderLinkToHtml(link) {
    var rawType = link.targetType.raw;
    if (rawType.module != null) {
      var label = link.label.trim();
      if (rawType.kind == CLASS_DATA_OBJECT) {
        if (label.length() == 0) {
          label = rawType.simpleName;
        }
        return "<a href=\"../../dataobjects.html#" + rawType.simpleName + "\">" + label + "</a>";
      } else if (rawType.kind == CLASS_ENUM && rawType.gen) {
        if (label.length() == 0) {
          label = rawType.simpleName;
        }
        return "<a href=\"../../enums.html#" + rawType.simpleName + "\">" + label + "</a>";
      } else {
        if (label.length() > 0) {
          label = "[" + label + "] ";
        }
        var elt = link.targetElement;
        var jsType = rawType.simpleName;
        var kind = elt.getKind().name();
        if (kind == "CLASS" || kind == "INTERFACE") {
          return label + "{@link " + jsType + "}";
        } else if (kind == "METHOD") {
          return label + "{@link " + jsType + "#" + elt.getSimpleName().toString() + "}";
        } else {
          System.out.println("Unhandled kind " + kind);
        }
      }
    }
    return null;
  }
}

@comment{"Generate the module name of a type"}
@comment{"===================================="}

@code{
  def genModuleName(moduleType) {
    return moduleType.raw.moduleName + "-js/" + CASE_CAMEL.to(CASE_SNAKE, moduleType.raw.simpleName);
  }
}

@comment{"Generate the JSDoc type of a type"}
@comment{"===================================="}

@comment{"TODO : add missing types"}
@code{
  def genJSDocType(type) {
    if (type.kind == CLASS_STRING) {
      return 'string';
    } else if (type.kind == CLASS_PRIMITIVE || type.kind == CLASS_BOXED_PRIMITIVE) {
      if (type.simpleName == 'boolean' || type.simpleName == 'Boolean') {
        return 'boolean';
      } else if (type.simpleName == 'char' || type.simpleName == 'Character') {
        return 'string';
      } else {
        return 'number';
      }
    } else if (type.kind == CLASS_JSON_OBJECT) {
      return 'Object';
    } else if (type.kind == CLASS_DATA_OBJECT) {
      return 'Object';
    } else if (type.kind == CLASS_ENUM) {
      return 'Object';
    } else if (type.kind == CLASS_API) {
      return type.raw.simpleName;
    } else if (type.kind.collection) {
      return 'Array.<' + genJSDocType(type.args[0]) + '>';
    } else if (type.kind == CLASS_MAP) {
      return 'Object.<string, ' + genJSDocType(type.args[1]) + '>';
    } else if (type.kind == CLASS_OBJECT) {
      return 'Object';
    } else if (type.kind == CLASS_HANDLER) {
      return 'function';
    } else {
      return 'todo';
    }
  }
}

@comment{"Generate the code that converts a parameter from JavaScript to Java to call a Java API method"}
@comment{"============================================================================================="}

@declare{'convParam'}
	@code{paramName = overloaded ? argName : param.name;}
	@code{funct = param.type.kind == CLASS_FUNCTION}
	@if{param.type.kind == CLASS_HANDLER || funct}
		@if{param.type.args[0].kind == CLASS_ASYNC_RESULT}
@if{param.nullable}@{paramName} == null ? null : @end{}function(ar) {\n
@if{funct}
@{ind}    var jRet;\n
@end{}
@{ind}    if (ar.succeeded()) {\n
@{ind}      @if{funct}jRet = @end{}@{paramName}(
			@if{param.type.args[0].args[0].name == "java.lang.Void"}
				null
			@else{}
				@includeNamed{'convReturn'; templ='arVal'; returnType=param.type.args[0].args[0]}
			@end{}, null);\n
@{ind}    } else {\n
@{ind}      @if{funct}jRet = @end{}@{paramName}(null, ar.cause());\n
@{ind}    }\n
@if{funct}
@{ind}    return jRet;\n
@end{}
@{ind}  }
		@else{param.type.args[0].name == "java.lang.Void"}
@{paramName}
		@else{}
@if{param.nullable}@{paramName} == null ? null : @end{}function(jVal) {\n
@{ind}    @if{funct}var jRet = @end{}@{paramName}(@includeNamed{'convReturn'; templ='basicVal'; returnType=param.type.args[0]});\n
@if{funct}
@{ind}    return @includeNamed{'unwrapToJava';unwrappedType=param.type.args[1];unwrappedName='jRet'};\n
@end{}
@{ind}  }
		@end{}
	@else{}
		@includeNamed{'unwrapToJava';unwrappedType=param.type;unwrappedName=paramName}
	@end{}
@end{}

@declare{'unwrapToJava'}
	@if{unwrappedType.kind == CLASS_JSON_OBJECT}
utils.convParamJsonObject(@{unwrappedName})
	@else{unwrappedType.kind == CLASS_JSON_ARRAY}
utils.convParamJsonArray(@{unwrappedName})
	@else{unwrappedType.kind == CLASS_DATA_OBJECT}
@{unwrappedName} != null ? new @{unwrappedType.simpleName}(new JsonObject(Java.asJSONCompatible(@{unwrappedName}))) : null
	@else{unwrappedType.kind == CLASS_ENUM}
@if{param.nullable}@{unwrappedName} == null ? null : @end{}@{unwrappedType.name}.valueOf(@{unwrappedName})
	@else{unwrappedType.kind == CLASS_OBJECT}
		@if{unwrappedType.variable}
			@if{unwrappedType.classParam}
j_@{unwrappedType.name}.unwrap(@{unwrappedName})
			@else{}
				@code{classTypeParam=method.resolveClassTypeParam(unwrappedType)}
				@if{classTypeParam != null}
utils.get_jtype(__args[@{classTypeParam.index}]).unwrap(@{unwrappedName})
				@else{}
utils.convParamTypeUnknown(@{unwrappedName})
				@end{}
			@end{}
		@else{}
utils.convParamTypeUnknown(@{unwrappedName})
		@end{}
	@else{unwrappedType.kind.basic}
		@if{unwrappedType.name == 'java.lang.Byte'}
utils.convParamByte(@{unwrappedName})
		@else{unwrappedType.name == 'java.lang.Short'}
utils.convParamShort(@{unwrappedName})
		@else{unwrappedType.name == 'java.lang.Integer'}
utils.convParamInteger(@{unwrappedName})
		@else{unwrappedType.name == 'java.lang.Long'}
utils.convParamLong(@{unwrappedName})
		@else{unwrappedType.name == 'java.lang.Float'}
utils.convParamFloat(@{unwrappedName})
		@else{unwrappedType.name == 'java.lang.Double'}
utils.convParamDouble(@{unwrappedName})
		@else{unwrappedType.name == 'java.lang.Character'}
utils.convParamCharacter(@{unwrappedName})
		@else{}
@{unwrappedName}
		@end{}
	@else{unwrappedType.kind == CLASS_THROWABLE}
utils.convParamThrowable(@{unwrappedName})
	@else{unwrappedType.kind == CLASS_LIST}
		@if{unwrappedType.args[0].name == 'long' || unwrappedType.args[0].name == 'java.lang.Long'}
utils.convParamListLong(@{unwrappedName})
		@else{unwrappedType.args[0].name == 'short' || unwrappedType.args[0].name == 'java.lang.Short'}
utils.convParamListShort(@{unwrappedName})
		@else{unwrappedType.args[0].name == 'byte' || unwrappedType.args[0].name == 'java.lang.Byte'}
utils.convParamListByte(@{unwrappedName})
		@else{unwrappedType.args[0].kind == CLASS_API}
utils.convParamListVertxGen(@{unwrappedName})
		@else{unwrappedType.args[0].kind == CLASS_JSON_OBJECT}
utils.convParamListJsonObject(@{unwrappedName})
		@else{unwrappedType.args[0].kind == CLASS_JSON_ARRAY}
utils.convParamListJsonArray(@{unwrappedName})
		@else{unwrappedType.args[0].kind == CLASS_DATA_OBJECT}
utils.convParamListDataObject(@{unwrappedName}, function(json) { return new @{unwrappedType.args[0].simpleName}(json); })
		@else{unwrappedType.args[0].kind == CLASS_ENUM}
utils.convParamListEnum(@{unwrappedName}, function(val) { return Packages.@{unwrappedType.args[0].name}.valueOf(val); })
		@else{}
@if{param.nullable}@{unwrappedName} == null ? null : @end{}utils.convParamListBasicOther(@{unwrappedName})
		@end{}
	@else{unwrappedType.kind == CLASS_SET}
		@if{unwrappedType.args[0].name == 'long' || unwrappedType.args[0].name == 'java.lang.Long'}
utils.convParamSetLong(@{unwrappedName})
		@else{unwrappedType.args[0].name == 'short' || unwrappedType.args[0].name == 'java.lang.Short'}
utils.convParamSetShort(@{unwrappedName})
		@else{unwrappedType.args[0].name == 'byte' || unwrappedType.args[0].name == 'java.lang.Byte'}
utils.convParamSetByte(@{unwrappedName})
		@else{unwrappedType.args[0].kind == CLASS_API}
utils.convParamSetVertxGen(@{unwrappedName})
		@else{unwrappedType.args[0].kind == CLASS_JSON_OBJECT}
utils.convParamSetJsonObject(@{unwrappedName})
		@else{unwrappedType.args[0].kind == CLASS_JSON_ARRAY}
utils.convParamSetJsonArray(@{unwrappedName})
		@else{unwrappedType.args[0].kind == CLASS_DATA_OBJECT}
utils.convParamSetDataObject(@{unwrappedName}, function(json) { return new @{unwrappedType.args[0].simpleName}(json); })
		@else{unwrappedType.args[0].kind == CLASS_ENUM}
utils.convParamSetEnum(@{unwrappedName}, function(val) { return Packages.@{unwrappedType.args[0].name}.valueOf(val); })
		@else{}
@if{param.nullable}@{unwrappedName} == null ? null : @end{}utils.convParamSetBasicOther(@{unwrappedName})
		@end{}
	@else{unwrappedType.kind == CLASS_CLASS_TYPE}
		utils.get_jclass(@{unwrappedName})
	@else{unwrappedType.kind == CLASS_MAP}
		@if{unwrappedType.args[1].name == 'long' || unwrappedType.args[1].name == 'java.lang.Long'}
utils.convParamMapLong(@{unwrappedName})
		@else{unwrappedType.args[1].name == 'short' || unwrappedType.args[1].name == 'java.lang.Short'}
utils.convParamMapShort(@{unwrappedName})
		@else{unwrappedType.args[1].name == 'byte' || unwrappedType.args[1].name == 'java.lang.Byte'}
utils.convParamMapByte(@{unwrappedName})
		@else{unwrappedType.args[1].kind == CLASS_API}
utils.convParamMapVertxGen(@{unwrappedName})
		@else{unwrappedType.args[1].kind == CLASS_JSON_OBJECT}
utils.convParamMapJsonObject(@{unwrappedName})
		@else{unwrappedType.args[1].kind == CLASS_JSON_ARRAY}
utils.convParamMapJsonArray(@{unwrappedName})
		@else{}
@{unwrappedName}
		@end{}
	@else{}
		@if{param.nullable}@{unwrappedName} == null ? null : @end{}@{unwrappedName}._jdel
	@end{}
@end{}

@declare{'basicVal'}
jVal
@end{}

@declare{'arVal'}
ar.result()
@end{}

@comment{"Generate a JavaScript Method"}
@comment{"============================"}

@declare{'genMethod'}
	@code{methodList = methodsByName.get(methodName)}
	@if{methodFilter != null}
		@code{methodList = new java.util.ArrayList()}
		@foreach{method : methodsByName.get(methodName)}
			@if{methodFilter(method)}
				@code{methodList.add(method)}
			@end{}
		@end{}
	@end{}
	@if{methodList.size() > 0}
	@code{overloaded = methodList.size() > 1; method = methodList.get(methodList.size() - 1);}
	@if{static == method.staticMethod}
@{ind}/**\n
@if{method.doc != null}
@{renderDocToHtml(ind, method.doc, renderLinkToHtml)}
@end{}\n
@{ind} @{static ? ("@memberof module:" + genModuleName(type)) : "@public" }\n
@foreach{param: method.params}@{ind} @param @{param.name} {@{genJSDocType(param.type)}} @if{param.description != null}@{renderTokensToHtml("", param.description.tokens, renderLinkToHtml, "")} @end{}@end{"\n"}\n
@if{!method.returnType.name.equals("void")}
@{ind} @return {@{genJSDocType(method.returnType)}}@if{method.returnDescription != null} @{renderTokensToHtml("", method.returnDescription.tokens, renderLinkToHtml, "")}@end{}\n
@end{}
@{ind} */\n
@{ind}@if{static}@{ifaceSimpleName}@else{}this@end{}.@{methodName} =
		@if{overloaded}
		 function() {\n
		@else{}
		 function(@foreach{param: method.params}@{param.name}@end{", "}) {\n
		@end{}
			@code{mcnt = 0;}
@{ind}  var __args = arguments;\n
			@foreach{method: methodList}
@{ind}@if{mcnt == 0}  if@else{}else if@end{} (__args.length === @{method.params.size()}
				@code{mcnt++;}
				@code{cnt = 0;}
				@if{method.params.size() > 0} && @end{}
				@foreach{param: method.params}
					@if{param.type.kind == CLASS_PRIMITIVE || param.type.kind == CLASS_BOXED_PRIMITIVE}
						@if{param.nullable}(@end{}
						typeof __args[@{cnt}] ===
							@if{param.type.name == 'long' || param.type.name == 'java.lang.Long' ||
									param.type.name == 'int'  || param.type.name == 'java.lang.Integer' ||
									param.type.name == 'short' || param.type.name == 'java.lang.Short' ||
									param.type.name == 'float' || param.type.name == 'java.lang.Float' ||
									param.type.name == 'double' || param.type.name == 'java.lang.Double' ||
									param.type.name == 'byte' || param.type.name == 'java.lang.Byte'}
								'number'
							@else{param.type.name == 'boolean' || param.type.name == 'java.lang.Boolean'}
								'boolean'
							@else{param.type.name == 'char' || param.type.name == 'java.lang.Character'}
								'string'
							@end{}
						@if{param.nullable} || __args[@{cnt}] == null)@end{}
					@else{param.type.kind == CLASS_STRING || param.type.kind == CLASS_ENUM}
						@if{param.nullable}(@end{}
						typeof __args[@{cnt}] === 'string'
						@if{param.nullable} || __args[@{cnt}] == null)@end{}
					@else{param.type.kind == CLASS_CLASS_TYPE}
						typeof __args[@{cnt}] === 'function'
					@else{param.type.kind == CLASS_API}
						typeof __args[@{cnt}] === 'object' && @if{param.nullable}(__args[@{cnt}] == null || @end{}__args[@{cnt}]._jdel@if{param.nullable})@end{}
					@else{param.type.kind == CLASS_JSON_ARRAY || param.type.kind == CLASS_LIST || param.type.kind == CLASS_SET}
						typeof __args[@{cnt}] === 'object' && @if{param.nullable}(@end{}__args[@{cnt}] instanceof Array@if{param.nullable} || __args[@{cnt}] == null)@end{}
					@else{param.type.kind == CLASS_HANDLER}
						@if{param.nullable}(@end{}
							typeof __args[@{cnt}] === 'function'
						@if{param.nullable} || __args[@{cnt}] == null)@end{}
					@else{param.type.kind == CLASS_OBJECT}
						@if{param.type.variable && param.type.classParam}
							j_@{param.type.name}.accept(__args[@{cnt}])
						@else{}
							typeof __args[@{cnt}] !== 'function'
						@end{}
					@else{param.type.kind == CLASS_FUNCTION}
						typeof __args[@{cnt}] === 'function'
					@else{param.type.kind == CLASS_THROWABLE}
						typeof __args[@{cnt}] === 'object'
					@else{}
						@if{!param.nullable}(@end{}
							typeof __args[@{cnt}] === 'object'
						@if{!param.nullable} && __args[@{cnt}] != null)@end{}
					@end{}
					@code{cnt++}
				@end{' && '}) {\n
				@includeNamed{'genMethodAdapter'}
@{ind}  }
			@end{} else throw new TypeError('function invoked with invalid arguments');\n
@{ind}};\n\n
	@end{}
	@end{}
@end{}
